import telebot
import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler
from config import TELEGRAM_API_TOKEN

bot = telebot.TeleBot(TELEGRAM_API_TOKEN)
scheduler = BackgroundScheduler()  # —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
scheduler.start()

reminders = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π


def remind(chat_id, message):
    bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")
    reminders[chat_id] = [reminder for reminder in reminders[chat_id] if reminder['message'] != message]


def parse_date_time(date_time_str):
    return datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M')


def generate_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_remind"),
        InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="view_remind")
    )
    return markup


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message,
                 "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remind <–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú> <—Å–æ–æ–±—â–µ–Ω–∏–µ>. –ß—Ç–æ–±—ã "
                 "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view.")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=generate_menu())


@bot.message_handler(commands=['remind'])
def set_reminder(message):
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) < 4:
            bot.reply_to(message,
                         "üõë –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å /remind <–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        date_part = parts[1]
        time_part = parts[2]
        reminder_text = parts[3]
        date_time_str = f"{date_part} {time_part}"

        try:
            run_date = parse_date_time(date_time_str)
        except ValueError:
            bot.reply_to(message, "üõë –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.")
            return

        if run_date <= datetime.datetime.now():
            bot.reply_to(message, "üõë –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.")
            return

        existing_reminders = reminders.get(message.chat.id, [])
        if any(reminder['time'] == run_date and reminder['message'] == reminder_text for reminder in
               existing_reminders):
            bot.reply_to(message, "üõë –û—à–∏–±–∫–∞: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        scheduler.add_job(remind, 'date', run_date=run_date, args=[message.chat.id, reminder_text])
        reminders[message.chat.id] = existing_reminders + [{'time': run_date, 'message': reminder_text}]
        bot.reply_to(message, f"‚úîÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {run_date}!")

    except Exception as e:
        bot.reply_to(message, f"üõë –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['view'])
def view_reminders(message):
    chat_id = message.chat.id
    if chat_id in reminders and reminders[chat_id]:
        response = "‚è∞ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        for reminder in reminders[chat_id]:
            response += f"- {reminder['time'].strftime('%Y-%m-%d %H:%M')}: {reminder['message']}\n"
        bot.send_message(chat_id, response)
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "set_remind":
        msg = bot.send_message(call.message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /remind <–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        bot.register_next_step_handler(msg, set_reminder)
    elif call.data == "view_remind":
        view_reminders(call.message)


if __name__ == '__main__':
    bot.polling(none_stop=True)
